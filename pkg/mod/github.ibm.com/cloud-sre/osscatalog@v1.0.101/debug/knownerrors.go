package debug

import "strings"

var knownErrors = map[string]bool{
	`Duplicate Tribe name: "IBM Cloud for VMware Solutions" - prior=Tribe(IBM Cloud for VMware Solutions[58eda55b9babda00075a50db-58eda5669babda00075a5103])/Segment(Hybrid Cloud[58eda55b9babda00075a50db]) - new=Tribe([58eda55b9babda00075a50db-5b21e54d616ee30007e3ef4a])/Segment(Hybrid Cloud[58eda55b9babda00075a50db]) - converting it to "IBM Cloud for VMware Solutions (1)"`:                                                                                                 true,
	`Duplicate Tribe name: "TEST_RECORD: shanec-test-tribe-april 23" - prior=Tribe(TEST RECORD: TEST_RECORD: shanec-test-tribe-april 23[5ea22c265ce811afb3f0dc00-5ea22f1e9effd76b2f11d4e6])/Segment(TEST RECORD: shanec-test-segment-april23[5ea22c265ce811afb3f0dc00]) - new=Tribe([5ea22c265ce811afb3f0dc00-5ea230279effd76b2f11d4e7])/Segment(TEST RECORD: shanec-test-segment-april23[5ea22c265ce811afb3f0dc00]) - converting it to "TEST_RECORD: shanec-test-tribe-april 23 (1)"`: true,
	`ListMainCatalogEntries() Found unknown entry kind in Global Catalog: "platform-service"  (name=pnp-api-oss  ID="c0cce9c0-c653-11e8-bb0b-db8ce4b2f53a")`: true,
	`ListMainCatalogEntries() Found unknown entry kind in Global Catalog: "catalog"  (name=openshift-catalog  ID="1082e7d2-5e2f-0a11-a3bc-f88a8e1931fc")`:    true,
	`ListTribes(Cloudant Platform) found 0 Tribes in ScorecardV1`:                                                                                            true,
	`ListTribes(Object Storage) found 0 Tribes in ScorecardV1`:                                                                                               true,
	`ListTribes(*TEST RECORD*TestSegment) found 0 Tribes in ScorecardV1`:                                                                                     true,
	`ListTribes(*Test Record* Leinster) found 0 Tribes in ScorecardV1`:                                                                                       true,
	`ListTribes(*Test Record* Andalucia) found 0 Tribes in ScorecardV1`:                                                                                      true,
	`ListTribes(IBM Analytics Cloud Services (GaaS)) found 0 Tribes in ScorecardV1`:                                                                          true,
	`ListTribes(Hybrid GaaS) found 0 Tribes in ScorecardV1`:                                                                                                  true,
	`ReadPartsInputFile(): found duplicate part number "D01F1ZX": entry1=&{PartNumber:D01F1ZX WWPC:WW0199 WWPCDescription:IBM Cloud Virtual Servers for VPC ProductID:5900A5O Division:SQ}    entry2={PartNumber:D01F1ZX WWPC:WW0199 WWPCDescription:IBM Cloud Virtual Servers for VPC ProductID:5900A4I Division:SQ}`:                                                                                                                                                                                                        true,
	`ReadPartsInputFile(): found duplicate part number "D1X2ILL": entry1=&{PartNumber:D1X2ILL WWPC:BMXZ078 WWPCDescription:IBM Cloud Garage Services ProductID:5725Z14 Division:8E}    entry2={PartNumber:D1X2ILL WWPC:BMXZ078 WWPCDescription:IBM Cloud Garage Services ProductID:5900A4Y Division:8E}`:                                                                                                                                                                                                                      true,
	`ReadPartsInputFile(): found duplicate part number "D1X2JLL": entry1=&{PartNumber:D1X2JLL WWPC:BMXZ078 WWPCDescription:IBM Cloud Garage Services ProductID:5725Z14 Division:8E}    entry2={PartNumber:D1X2JLL WWPC:BMXZ078 WWPCDescription:IBM Cloud Garage Services ProductID:5900A4Y Division:8E}`:                                                                                                                                                                                                                      true,
	`ReadPartsInputFile(): found entry with empty part number: {PartNumber: WWPC:BMXZ078 WWPCDescription:IBM Garage for Cloud ProductID: Division:8E}`:                                                                                                                                                                                                                                                                                                                                                                        true,
	`ossmerge.LoadAllEntries.Doctor Environments: found entry with invalid new_crn: DoctorEnvironment(/MIS_DEVEL[]  -- ParseCRNMask() expected 10 components but got 1  (input="")`:                                                                                                                                                                                                                                                                                                                                           true,
	`ossmerge.LoadAllEntries.Doctor Environments: found entry with invalid new_crn: DoctorEnvironment(/MIS_PROD[]  -- ParseCRNMask() expected 10 components but got 1  (input="")`:                                                                                                                                                                                                                                                                                                                                            true,
	`ossmerge.LoadAllEntries.Doctor Environments: found entry with invalid new_crn: DoctorEnvironment(IBM Yellow Staging 0 - London (LYS0)/YS0_LONDON[]  -- ParseCRNMask() expected 10 components but got 1  (input="")`:                                                                                                                                                                                                                                                                                                      true,
	`ossmerge.LoadAllEntries.Doctor Environments: found entry with invalid new_crn: DoctorEnvironment(AlfaEvolution/D_ALFAEVOLUTION[]  -- ParseCRNMask() expected 10 components but got 1  (input="")`:                                                                                                                                                                                                                                                                                                                        true,
	`ossmerge.LoadAllEntries.Doctor RegionIDs: found entry with no CRN: DoctorRegionID(SoftLayer[]/mccpid=SoftLayer)  -- Cannot construct CRN for Doctor RegionID: CRN attribute is empty and MCCPID not of the form "<cname>:<something>:<location>"  -- input=DoctorRegionID(SoftLayer[]/mccpid=SoftLayer)`:                                                                                                                                                                                                                 true,
	`ossmerge.LoadAllEntries.MainCatalog: Found deployment with empty ParentID: Catalog{Name:"wasbaseplan-au-syd", Kind:"deployment", ID:"435fbdb5-1287-4f21-ab0d-0bc00b919e45:au-syd"}`:                                                                                                                                                                                                                                                                                                                                      true,
	`ossmerge.LoadAllEntries.MainCatalog: Found deployment with empty ParentID: Catalog{Name:"wasndplan-eu-de", Kind:"deployment", ID:"16d8bb9d-5a23-4fa1-bbd4-7a6ccee41ad8:eu-de"}`:                                                                                                                                                                                                                                                                                                                                          true,
	`ossmerge.LoadAllEntries.MainCatalog: Found deployment with empty ParentID: Catalog{Name:"wasndplan-eu-gb", Kind:"deployment", ID:"16d8bb9d-5a23-4fa1-bbd4-7a6ccee41ad8:eu-gb"}`:                                                                                                                                                                                                                                                                                                                                          true,
	`ossmerge.LoadAllEntries.MainCatalog: Found duplicate Catalog ID="8106946b-99ba-493a-929e-0c97ead623d3" for Main resource: Catalog{Path:"/object-storage-group/object-storage", Kind:"service", ID:"8106946b-99ba-493a-929e-0c97ead623d3"} <-> Catalog{Path:"/object-storage", Kind:"service", ID:"8106946b-99ba-493a-929e-0c97ead623d3"}`:                                                                                                                                                                                true,
	`Error reading RMC record "wiotp" for entry wiotp: Error in HTTP GET for RMC  (url=https://api.rmc.test.cloud.ibm.com/v1/services/wiotp/summary?onlyData=true): Get https://api.rmc.test.cloud.ibm.com/v1/services/wiotp/summary?onlyData=true: net/http: request canceled (Client.Timeout exceeded while awaiting headers)`:                                                                                                                                                                                              true,
	`Error reading RMC record "Boilerplates/User Modeling Ruby Web Starter" for entry boilerplates-user-modeling-ruby-web-starter: Error in HTTP GET for RMC  (url=https://api.rmc.test.cloud.ibm.com/v1/services/Boilerplates/User Modeling Ruby Web Starter/summary?onlyData=true): HTTPError code=404 Not Found : <!DOCTYPE html>`:                                                                                                                                                                                         true,
	`Error reading RMC record "Boilerplates/User Modeling Ruby Web Starter" for entry boilerplates-user-modeling-ruby-web-starter: Error in HTTP GET for RMC  (url=https://api.rmconsole.test.cloud.ibm.com/v1/services/Boilerplates/User Modeling Ruby Web Starter/summary?onlyData=true): HTTPError code=404 Not Found : <!DOCTYPE html>`:                                                                                                                                                                                   true,
	`Error reading RMC record "Boilerplates/User Modeling Ruby Web Starter" for entry boilerplates-user-modeling-ruby-web-starter: Error in HTTP GET for RMC  (url=https://api.rmconsole.test.cloud.ibm.com/v1/services/Boilerplates/User Modeling Ruby Web Starter/summary?onlyData=true): HTTPError code=404 Not Found : {"error":"Error: Not found"}`:                                                                                                                                                                      true,
	`Error reading RMC record "IBM Bluemix Dedicated for GitHub Enterprise GA (Dedicated)" for entry ibm-bluemix-dedicated-for-github-enterprise-ga--dedicated-: Error in HTTP GET for RMC  (url=https://api.rmconsole.test.cloud.ibm.com/v1/services/IBM Bluemix Dedicated for GitHub Enterprise GA (Dedicated)/summary?onlyData=true): HTTPError code=400 Bad Request : {"error":[{"value":"IBM Bluemix Dedicated for GitHub Enterprise GA (Dedicated)","msg":"Invalid value","param":"serviceName","location":"params"}]}`: true,
	`Error reading RMC record "Mobile Accessibility Checker (MAC)" for entry mobile-accessibility-checker--mac-: Error in HTTP GET for RMC  (url=https://api.rmconsole.test.cloud.ibm.com/v1/services/Mobile Accessibility Checker (MAC)/summary?onlyData=true): HTTPError code=400 Bad Request : {"error":[{"value":"Mobile Accessibility Checker (MAC)","msg":"Invalid value","param":"serviceName","location":"params"}]}`:                                                                                                 true,
	`Error reading RMC record "Multilingual Discovery (Closed Exp)" for entry multilingual-discovery--closed-exp-: Error in HTTP GET for RMC  (url=https://api.rmconsole.test.cloud.ibm.com/v1/services/Multilingual Discovery (Closed Exp)/summary?onlyData=true): HTTPError code=400 Bad Request : {"error":[{"value":"Multilingual Discovery (Closed Exp)","msg":"Invalid value","param":"serviceName","location":"params"}]}`:                                                                                             true,
	`Error reading RMC record "SL-DC-Operations & SL-Facilities" for entry sl-dc-operations---sl-facilities: Error in HTTP GET for RMC  (url=https://api.rmconsole.test.cloud.ibm.com/v1/services/SL-DC-Operations & SL-Facilities/summary?onlyData=true): HTTPError code=400 Bad Request : {"error":[{"value":"SL-DC-Operations & SL-Facilities","msg":"Invalid value","param":"serviceName","location":"params"}]}`:                                                                                                         true,
	`Error reading RMC record "fundingshield---wire-account-verification-service--wavs-" for entry fundingshield---wire-account-verification-service--wavs-: Error in HTTP GET for RMC  (url=https://rmc.api.cloud.ibm.com/test/v1/services/fundingshield---wire-account-verification-service--wavs-/summary?onlyData=true): HTTPError code=400 Bad Request : {"error":[{"value":"fundingshield---wire-account-verification-service--wavs-","msg":"Invalid value","param":"serviceName","location":"params"}]}`:               true,
	`Error reading RMC record "mobile-accessibility-checker--mac-" for entry mobile-accessibility-checker--mac-: Error in HTTP GET for RMC  (url=https://rmc.api.cloud.ibm.com/test/v1/services/mobile-accessibility-checker--mac-/summary?onlyData=true): HTTPError code=400 Bad Request : {"error":[{"value":"mobile-accessibility-checker--mac-","msg":"Invalid value","param":"serviceName","location":"params"}]}`:                                                                                                       true,
	`Error reading RMC record "-rmc-3p-asc-regre-07-02-2020a" for entry rmc3pascregre07022020a/comparableName: Error in HTTP GET for RMC  (url=https://rmc.api.cloud.ibm.com/test/v1/services/-rmc-3p-asc-regre-07-02-2020a/summary?onlyData=true): HTTPError code=400 Bad Request : {"error":[{"value":"-rmc-3p-asc-regre-07-02-2020a","msg":"Invalid value","param":"serviceName","location":"params"}]}`:                                                                                                                   true,
	`Error reading RMC record "multilingual-discovery--closed-exp-" for entry multilingual-discovery--closed-exp-: Error in HTTP GET for RMC  (url=https://rmc.api.cloud.ibm.com/test/v1/services/multilingual-discovery--closed-exp-/summary?onlyData=true): HTTPError code=400 Bad Request : {"error":[{"value":"multilingual-discovery--closed-exp-","msg":"Invalid value","param":"serviceName","location":"params"}]}`:                                                                                                   true,
	`Error reading RMC record "ibm-bluemix-dedicated-for-github-enterprise-ga--dedicated-" for entry ibm-bluemix-dedicated-for-github-enterprise-ga--dedicated-: Error in HTTP GET for RMC  (url=https://rmc.api.cloud.ibm.com/test/v1/services/ibm-bluemix-dedicated-for-github-enterprise-ga--dedicated-/summary?onlyData=true): HTTPError code=400 Bad Request : {"error":[{"value":"ibm-bluemix-dedicated-for-github-enterprise-ga--dedicated-","msg":"Invalid value","param":"serviceName","location":"params"}]}`:       true,
	`Error reading RMC record "ibm-blockchain-5-" for entry ibm-blockchain-5-: Error in HTTP GET for RMC  (url=https://rmc.api.cloud.ibm.com/test/v1/services/ibm-blockchain-5-/summary?onlyData=true): HTTPError code=400 Bad Request : {"error":[{"value":"ibm-blockchain-5-","msg":"Invalid value","param":"serviceName","location":"params"}]}`:                                                                                                                                                                           true,
	`Error reading RMC record "rmc-1p-asc-test1004" for entry rmc1pasctest1004/comparableName: Error in HTTP GET for RMC  (url=https://rmc.api.cloud.ibm.com/test/v1/services/rmc-1p-asc-test1004/summary?onlyData=true): HTTPError code=401 Unauthorized : {"message":"Not Authorized"}`:                                                                                                                                                                                                                                     true,
	`Error reading RMC record "kala-corp--kala-test-saas-" for entry kalacorpkalatestsaas/comparableName: Error in HTTP GET for RMC  (url=https://rmc.api.cloud.ibm.com/test/v1/services/kala-corp--kala-test-saas-/summary?onlyData=true): HTTPError code=400 Bad Request : {"error":[{"value":"kala-corp--kala-test-saas-","msg":"Invalid value","param":"serviceName","location":"params"}]}`:                                                                                                                              true,
	`Error reading RMC record "intercom-testproduct-" for entry intercomtestproduct/comparableName: Error in HTTP GET for RMC  (url=https://rmc.api.cloud.ibm.com/test/v1/services/intercom-testproduct-/summary?onlyData=true): HTTPError code=400 Bad Request : {"error":[{"value":"intercom-testproduct-","msg":"Invalid value","param":"serviceName","location":"params"}]}`:                                                                                                                                              true,
	`Error reading RMC record "rmc-1p-asc-test1004" for entry rmc1pasctest1004/comparableName: Error in HTTP GET for RMC  (url=https://rmc.api.cloud.ibm.com/test/v1/services/rmc-1p-asc-test1004/summary?onlyData=true): HTTPError code=500 Internal Server Error : {"error":"Something went wrong"}`:                                                                                                                                                                                                                        true,
}

var knownErrorSubstrings = []string{
	`Duplicate Segment name: "TEST RECORD`,
	`Duplicate Segment name: "TEST Record`,
	`/rmc-3p-prodtaehyung-test001`,
	`/classic_infrastructure_`,
}

func isKnownError(msg string) bool {
	if ix := strings.IndexAny(msg, "\n\r"); ix != -1 {
		msg = msg[0:ix]
	}
	if _, ok := knownErrors[msg]; ok {
		return true
	}
	for _, sub := range knownErrorSubstrings {
		if strings.Contains(msg, sub) {
			return true
		}
	}
	return false
}
